pipeline {
    agent any

    environment {
        PYTHON_PATH = sh(script: 'which python3', returnStdout: true).trim()
        VENV = "${WORKSPACE}/job-apply-service/venv"
        SERVICE_DIR = "${WORKSPACE}/job-apply-service"
        PATH = "/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
        DOCKER_IMAGE = "emmaekwere/job-apply-service:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Init') {
            steps {
                script {
                    echo "Working on main branch, direct push workflow"
                }
                sh 'echo $PATH'
                sh 'which docker || echo "docker not found"'
            }
        }

        stage('Setup') {
            steps {
                echo 'Setting up Python virtual environment and installing dependencies...'
                sh """
                    cd "${SERVICE_DIR}"
                    if [ ! -f requirements.txt ]; then
                        echo "ERROR: requirements.txt not found in ${SERVICE_DIR}"
                        exit 1
                    fi
                    "${PYTHON_PATH}" -m venv "${VENV}"
                    . "${VENV}/bin/activate"
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    pip freeze > requirements.lock
                """
            }
        }

        stage('Lint') {
            steps {
                echo 'Running flake8 linter to check code quality...'
                sh """
                    cd "${SERVICE_DIR}"
                    . "${VENV}/bin/activate"
                    pip install flake8
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv/,.*,__pycache__,docs/
                """
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests with pytest and generating coverage report...'
                sh """
                    cd "${SERVICE_DIR}"
                    . "${VENV}/bin/activate"
                    pip install pytest pytest-cov
                    mkdir -p test-reports
                    pytest --junitxml=test-reports/results.xml --cov=. --cov-report=xml:coverage.xml
                """
            }
            post {
                always {
                    dir("${SERVICE_DIR}") {
                        junit allowEmptyResults: true, testResults: 'test-reports/results.xml'
                        publishCoverage adapters: [coberturaAdapter(path: 'coverage.xml')]
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DUMMY_USER', passwordVariable: 'DOCKER_TOKEN')]) {
                    sh '''
                        echo $DOCKER_TOKEN | docker login -u emmaekwere --password-stdin

                        docker build -t emmaekwere/job-apply-service:latest ./job-apply-service

                        docker push emmaekwere/job-apply-service:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            script {
                node {
                    cleanWs()
                }
            }
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
