pipeline {
    agent any

    environment {
        PATH = "/usr/local/bin:${env.PATH}"
        COMPOSER_HOME = "/tmp/composer"
        PROJECT_DIR = "auth-service"
        DOCKER_IMAGE = "emmaekwere/auth-service:latest"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Init') {
            steps {
                echo "Working on main branch for Laravel Auth microservice"
                sh '''
                    echo "Repository structure:"
                    ls -la
                    echo "Auth service directory contents:"
                    ls -la ${PROJECT_DIR}/ || echo "Project directory not found"
                '''
            }
        }

        stage('Setup') {
            steps {
                echo 'Installing Composer dependencies for auth-service...'
                dir("${PROJECT_DIR}") {
                    sh '''
                        echo "Current working directory:"
                        pwd
                        echo "Checking for composer.json:"
                        ls -la composer.json
                        echo "PHP Version:"
                        /usr/local/bin/php --version
                        echo "Composer Version:"
                        /usr/local/bin/composer --version
                        echo "Installing dependencies..."
                        /usr/local/bin/composer install --no-interaction --prefer-dist --optimize-autoloader
                    '''
                }
            }
        }

        stage('Lint') {
            steps {
                dir("${PROJECT_DIR}") {
                    sh '''
                        if ! command -v phpcs >/dev/null 2>&1; then
                            echo "Installing PHP CodeSniffer..."
                            /usr/local/bin/composer global require 'squizlabs/php_codesniffer=*'
                        fi
                        export PATH=$PATH:/Users/spirit/.composer/vendor/bin
                        LINT_DIRS=""
                        [ -d "app" ] && LINT_DIRS="$LINT_DIRS app/"
                        [ -d "routes" ] && LINT_DIRS="$LINT_DIRS routes/"
                        [ -d "tests" ] && LINT_DIRS="$LINT_DIRS tests/"
                        if [ -n "$LINT_DIRS" ]; then
                            echo "Linting directories: $LINT_DIRS"
                            /Users/spirit/.composer/vendor/bin/phpcs --standard=PSR12 $LINT_DIRS
                        else
                            echo "No directories to lint."
                        fi
                    '''
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests with Pest...'
                dir("${PROJECT_DIR}") {
                    sh '''
                        if [ -f "./vendor/bin/pest" ]; then
                            ./vendor/bin/pest
                        elif [ -f "./vendor/bin/phpunit" ]; then
                            echo "Pest not found, using PHPUnit instead"
                            ./vendor/bin/phpunit
                        else
                            echo "No test runner found (pest or phpunit)"
                            exit 1
                        fi
                    '''
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def gitCommit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    echo "Git Commit SHA: ${gitCommit}"

                    withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DUMMY_USER', passwordVariable: 'DOCKER_TOKEN')]) {
                        sh """
                            echo \$DOCKER_TOKEN | docker login -u emmaekwere --password-stdin

                            docker build -t emmaekwere/auth-service:latest ./${PROJECT_DIR}

                            docker tag emmaekwere/auth-service:latest emmaekwere/auth-service:${gitCommit}

                            docker push emmaekwere/auth-service:latest
                            docker push emmaekwere/auth-service:${gitCommit}

                            docker logout
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Auth service build pipeline succeeded!'
        }
        failure {
            echo 'Auth service build pipeline failed!'
        }
        always {
            cleanWs()
        }
    }
}
