pipeline {
    agent any

    environment {
        // Get the Python path from the environment
        PYTHON_PATH = sh(script: 'which python3', returnStdout: true).trim()

        // Define path to the virtual environment inside the workspace
        VENV = "${WORKSPACE}/venv"
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Init') {
            steps {
                script {
                    // We're always working on main branch directly
                    echo "Working on main branch, direct push workflow"
                }
            }
        }

        stage('Setup') {
            steps {
                echo 'Setting up Python virtual environment and installing dependencies...'

                // Create virtual environment, activate it, and install dependencies
                sh """
                    "${PYTHON_PATH}" -m venv "${VENV}"
                    . "${VENV}/bin/activate"
                    pip install --upgrade pip
                    pip install -r requirements.txt
                    pip freeze > requirements.lock
                """
            }
        }

        stage('Lint') {
            steps {
                echo 'Running flake8 linter to check code quality...'

                // Activate virtualenv, install flake8, and run linting
                sh """
                    . "${VENV}/bin/activate"
                    pip install flake8
                    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv/,.*,__pycache__,docs/
                """
            }
        }

        stage('Test') {
            steps {
                echo 'Running tests with pytest and generating coverage report...'
                sh """
                    . "${VENV}/bin/activate"
                    pip install pytest pytest-cov
                    mkdir -p test-reports
                    pytest --junitxml=test-reports/results.xml --cov=. --cov-report=xml:coverage.xml
                """
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'test-reports/results.xml'
                    publishCoverage adapters: [coberturaAdapter(path: 'coverage.xml')]
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building Python package from source...'

                // Activate virtualenv, install build tool, and create distributable package
                sh """
                    . "${VENV}/bin/activate"
                    pip install build
                    rm -rf dist/  # Clean previous artifacts to avoid cached wheel files
                    python -m build
                """
            }
        }
    }

    post {
        always {
            script {
                // Make sure cleanWs() is inside node context
                node {
                    cleanWs()
                }
            }
        }

        success {
            echo 'Build succeeded!'
        }

        failure {
            echo 'Build failed!'
        }
    }
}